y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 = c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
q()
add2 <- function(x, y) {
x + Y
}
add2(3,5)
add2(3, 5)
add2 <- function(x, y) {
x + y
}
add2(3, 5)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {}
x <- 5
y <- if(x <3) {
NA
} else {
10
}
y
library(swirl)
ls()
rm(list=ls())
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dims(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
ls()
ls()
rm(list=ls(all=TRUE))
ls()
library(datasets)
data(iris)
?iris
str(iris)
summary(iris)
dim(iris)
head(iris)
tail(iris)
sapply(iris, mean)
sapply(iris$Sepal.Length, mean)
sapply(iris[, 1], mean)
lapply(iris$Sepal.Length, mean)
?colmeans
?colmean
?colMeans
colMeans(iris)
colMeans(iris$Sepal.Length)
iris$Sepal.Length
split(iris, iris$Sepal.Length)
split(iris, 1)
?split
colMeans(iris[, "Sepal.Length"])
colMeans(iris[, c("Sepal.Length")])
summary(iris)
iris[, "Sepal.Length"]
x <- iris[, "Sepal.Length"]
x
sapply(x, mean)
sapply(iris, mean)
sapply(iris[, 1], mean)
sapply(iris[, 1:4], mean)
colMeans(iris)
colMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
tail(mtcars)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
?abs
x <- split(mtcars, mtcars$cyl)
x
x[, 6]
x[[6]]
x[,[6]]
x[x$6]
x$6
class(x)
tapply(mtcars$mpg, mtcars$cyl, mean)
y <- tapply(mtcars$mpg, mtcars$cyl, mean)
class(y)
y
y[1,1]
y[1]
y$4
names(y)
y{"4"]
y["4"]
abs(y["4"] - y["8"]
)
debug(ls)
ls()
str(iris)
iris
split(iris, iris$species)
split(iris, iris$Species)
tapply(iris$Sepal.Length, iris$Species, mean)
summary(iris)
apply(iris[, 1:4], 2, mean)
mtcars
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
y <- with(mtcars, tapply(hp, cyl, mean))
y
abs(y[3] - y[1])
q()
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
q()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setRepositories()
getwd()
update.packages(ask='graphics',checkBuilt=TRUE)
setRepositories()
chooseCRANmirror()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
q()
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type = "source")
library(RMySQL)
ucsDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB);
result <- dbGetQuery(ucsDB, "show databases;"); dbDisconnect(ucsDB);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0,by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
q()
library(swirl)
ls()
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class))
)
"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
?group_by
?mutate
submit()
q()
setwd("~/GitHub/Exploratory-Data-Analysis-Course-Project-2")
?readrds
?readRDS
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
View(NEI)
str(NEI)
summary(NEI)
head(NEI)
tail(NEI)
str(SCC)
View(SCC)
unique(SCC$Data.Category)
unique(NEI$year)
unique(NEI$type)
is.na(SCC)
str(NEI)
barplot(NEI$year)
?barplot
nei <- NEI[500, ]
View(nei)
nei <- NEI[500, 6]
nei <- NEI[6, 500]
nei <- NEI[1:500, ]
barplot(nei$year)
t <- table(nei$year)
t <- table(NEI$Emissions, NEI$year)
t <- table(NEI$year)
?table
data <- c(1999, 1999, 2002, 2002, 2005, 2005, 2008, 2008)
data <- as.data.frame(data)
View(data)
names(data)
values <- c(1,2,3,4,5,6,7,8)
d <- cbind(data, values)
View(d)
barplot(d)
barplot(d$values)
table(d$data, d$values)
table(d$data, sum(d$values)
)
library("dplyr")
nei <- tbl_df(NEI)
scc <- tbl_df(SCC)
d1999 <- filter(nei, year == 1999)
d2002 <- filter(nei, year == 2002)
View(`d1999`)
d2005 <- filter(nei, year == 2005)
d2008 <- filter(nei, year == 2008)
s1999 <- sum(d1999$Emissions)
s2002 <- sum(d2002$Emissions)
s2005 <- sum(d2005$Emissions)
s2008 <- sum(d2008$Emissions)
barplot(s1999)
plot(nei$year, nei$Emissions)
?barplot
counts(nei$year)
table(nei$year)
?sum
neiG <- group_by(nei, year)
summarize(neiG, sum(Emissions))
data <- summarize(neiG, sum(Emissions))
barplot(data)
barplot(data$sum(Emissions))
class(data)
names(data)
names(data[2])
names(data[2]) = "Emissions"
names(data[2])
names(data[2]) <- "Emissions"
names(data[2])
data
data <- summarize(neiG, Emissions = sum(Emissions))
data
data <- summarize(neiG, Emissions = sum(Emissions)/100000)
data
data <- summarize(neiG, Emissions = sum(Emissions)/1000000)
data
barplot(data$Emissions)
?barplot
barplot(data$Emissions, names.arg = data$year)
barplot(data$Emissions, names.arg = data$year, col = blue)
barplot(data$Emissions, names.arg = data$year, col = "blue)
)
barplot(data$Emissions, names.arg = data$year, col = "blue")
barplot(data$Emissions, names.arg = data$year, col = 121)
barplot(data$Emissions, names.arg = data$year, col = colors(121))
barplot(data$Emissions, names.arg = data$year, col = "lightskyblue")
barplot(data$Emissions, names.arg = data$year, col = "lightskyblue", main="Total Emissions in the United States", sub="PM2.5 Fine Particulate Matter", xlab="Year", ylab="Total PM2.5 Emissions (MM)")
barplot(data$Emissions, names.arg = data$year, col = "lightskyblue", main="Total PM2.5 Emissions in the United States", xlab="Year", ylab="Total Emissions (MM)")
source('~/GitHub/Exploratory-Data-Analysis-Course-Project-2/plot1.R')
source('~/GitHub/Exploratory-Data-Analysis-Course-Project-2/plot1.R')
source('~/GitHub/Exploratory-Data-Analysis-Course-Project-2/plot1.R')
source('~/GitHub/Exploratory-Data-Analysis-Course-Project-2/plot1.R')
barplot(data$Emissions, names.arg = data$year, col = "lightskyblue", main="Total PM2.5 Emissions in the United States", xlab="Year", ylab="Total Emissions (MM)")
rm(NEI)
